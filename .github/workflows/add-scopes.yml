name: Issue Parser


on:
  issues:
    types:
      - edited
      - opened

jobs:
  parse_issue:
    runs-on: ubuntu-latest
    steps:
      - name: View context attributes
        uses: actions/github-script@v6
        with:
          script: console.log(context)
      - name: Parse Issue Description
        id: parse
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const regexSimple = /(Bet\s+(\S+)?#(\d+))/;
            const description = context.payload.issue.body;
            const match = regexSimple.exec(description);
            // Simple cases Bet #[number] and Bet User/Repo#[number]
            if (match) {
              const repoFull = match[2] ? match[2] : context.payload.repository.full_name;
              const owner = repoFull.split('/')[0];
              const repo = repoFull.split('/')[1];
              const issueNumber = Number(match[3]);
              const repoUrl = `https://github.com/${repoFull}`;
              const query = `
                    query($owner: String!, $repo: String!, $issue: Int!) { 
                      user(login: $owner) {
                          repository(name: $repo) {
                              issue(number: $issue) {
                                  id
                                  title
                                  body
                              }
                          }
                      }
                  }
              `;
              const variables = {
                owner,
                repo,
                issue: issueNumber
              }
              try {
                const result = await github.graphql(query, variables)
              } catch (error) {
                console.log(`Failed query for issue #${issueNumber}`, error);
                return
              }
              const {body, id} = result.user.repository.issue

              console.log(`betIssueDescription`, betIssueDescription);

              return {
                issueNumber,
                owner,
                repo,
                repoUrl,
                betIssueDescription: body,
                issueNodeId: id
              };
            } else {
              return {};
            }
      - name: Output Issue Number and Repo URL
        id: output
        uses: actions/github-script@v6
        with:
          script: |
            const res = ${{ steps.parse.outputs.result }}
            if (!res) {
              console.log("No Bet linked to this issue")
              return
            }
            const issueNumber = res.issueNumber
            const repo = res.repoUrl
            console.log(res)
      - name: Add The issue to the Bet
        id: add-bet
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issueNumber, repo, owner, repoUrl, betIssueDescription, issueNodeId } = ${{ steps.parse.outputs.result }}
            const regex = /###?\s+Scope\s*\n([\s\S]*?)(?=###?|$)/;
            console.log(betIssueDescription);
            console.log(issueNumber, repo, owner, repoUrl)
            const match = betIssueDescription.match(regex);
            if (!match) {
              console.log("Nothing to do in this issue");
              return
            }
            console.log(match)
            const currentScope = match[1].trim();
            const newTask = '- [ ] New Task';
            const newScope = `${currentScope}\n${newTask}`;
            const newBetDescription = betIssueDescription.replace(currentScope, newScope);
            if (!match) {
              console.log("No Bet linked to this issue")
              return
            }
            const mutation = `mutation ($input: UpdateProjectV2ItemFieldValueInput!) {
                updateIssue(input: $input) {
                    clientMutationId
                }
              }`;
            const variables = {
                input : {
                  id: issueNodeId,
                  body: newBetDescription
                }
              };
            try {
              await github.graphql(mutation, variables);
            } catch (error) {
              console.log(`Failed mutation for issue #${issueNodeId}`, error);
            }

