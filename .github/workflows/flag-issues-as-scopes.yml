name: Flag issues as scopes

on:
  issues:
    types:
      - edited
  workflow_dispatch: {}

env:
  PROJECT_NUMBER: 4

jobs:
  flag-issues-as-scopes:
    runs-on: ubuntu-latest
    permissions:
      repository-projects: write
    steps:
      - name: View context attributes
        uses: actions/github-script@v6
        with:
          script: console.log(context)
      # - name: Generate a token
      #   id: generate_token
      #   uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
      #   with:
      #     app_id: ${{ secrets.APP_ID }}
      #     private_key: ${{ secrets.PRIVATE_KEY }}
      - name: Get the issue project informations
        id: project-info  
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          result-encoding: json
          script: |
            const query = `query($owner: String!, $name: String!, $issue: Int!) { 
                  user(login: $owner) {
                    repository(name: $name) {
                      issue(number: $issue) {
                        title
                        number
                        projectsV2(first:1) {
                          nodes {
                            id
                          }
                        }
                        trackedIssues(first:100) {
                          nodes {
                            id
                            number
                            title
                            labels(first:10) {
                              nodes {
                                name
                              }
                            }
                            projectsV2(first:1) {
                              nodes {
                                id
                              }
                            }
                          }
                        }
                    }
                  }
                }
              }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
              issue: context.payload.issue.number
            }
            const result = await github.graphql(query, variables)
            console.log(JSON.stringify(result))
            return result
      - name: Use the project Info
        uses: actions/github-script@v6
        with:
          script: |
            const data = ${{ steps.project-info.outputs.result }}
            console.log(data)
      - name: Extract scope tasks
        id: extract-tasks
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const changes = context.payload.changes;
            const issueData = ${{ steps.project-info.outputs.result }}
            const project = issueData.user.repository.issue.projectsV2.nodes.length > 0 ? issueData.user.repository.issue.projectsV2.nodes[0] : null
            const issueNumber = issue.number;
            const kind = 'kind/bet';

            const isIssueKindBet = issue.labels.some(label => label.name === kind);
            const trackedTasks = issueData.user.repository.issue.trackedIssues.nodes;


            const addIssueToProject = async (issueNumber, projectId) => {
              const addToProjectMutation = `mutation {
                  addProjectV2ItemById(input: {projectId: "${projectId}", contentId: "${issueNumber}"}) {
                    clientMutationId
                  }
              }`;
              const variables = {
                  owner: context.repo.owner,
                  name: context.repo.repo
              };
              
              try {
                await github.graphql(addToProjectMutation, variables);
                console.log(`Added issue #${issueNumber} to project ${projectId}.`);
              } catch (error) {
                console.log(`Failed to add issue #${issueNumber} to project ${projectId}:`, error);
              }
            };

            if (isIssueKindBet) {
              const oldDescription = changes.body ? changes.body.from : '';
              const newDescription = issue.body;
              if (!project) {
                console.log("This issue have not a project assigned")
                return;
              }
              if (oldDescription !== newDescription) {
                for (const scope of trackedTasks) {
                  console.log("Working with ", scope.title)
                  let projectScopes = scope.projectsV2.nodes.map((p) => p.id)
                  console.log(`Scope projects`, projectScopes, `projectID`, project.id)
                  // Adding tracked issues to the project if they are not
                  if (!projectScopes.includes(project.id)) {
                    console.log("SHOULD ADD HERE", scope.id, project.id)
                    // await addIssueToProject(scope.id, project.id)
                  }
                }
              }
            }