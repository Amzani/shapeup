name: Flag issues as scopes

on:
  issues:
    types:
      - edited
  workflow_dispatch: {}

env:
  PROJECT_NUMBER: 4

jobs:
  flag-issues-as-scopes:
    runs-on: ubuntu-latest
    permissions:
      repository-projects: write
    steps:
      - name: View context attributes
        uses: actions/github-script@v6
        with:
          script: console.log(context)
      - name: Get the issue project informations
        id: project-info  
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const query = `query($owner: String!, $name: String!) { 
              user(login: $owner) {
                name
                repository(name: $name) {
                  name
                  hasProjectsEnabled
                  viewerPermission
                  projectsV2(first: 2) {
                    nodes {
                      number
                      id
                    }
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
              issue: context.payload.issue.number
            }
            const result = await github.graphql(query, variables)
            console.log(JSON.stringify(result))
            return result
      - name: Use the project Info
        uses: actions/github-script@v6
        with:
          script: |
            const data = ${{ steps.project-info.outputs.result }}
            const projectNodeId = data.user.repository.issue.projectV2.id;
            console.log(`data`, data, `projectNodeId`, projectNodeId)
      - name: Extract scope tasks
        id: extract-tasks
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const changes = context.payload.changes;
            const issueNumber = issue.number;
            const projectId = 4; // Replace with the desired project number
            const kind = 'kind/bet'; // Replace with the desired kind

            const isIssueBelongsToProject = issue.project_card !== undefined && issue.project_card.project_id === projectId;
            const isIssueKindBet = issue.labels.some(label => label.name === kind);
            console.log(`Issue Chages`, changes.body, `Current body`, issue.body);
            console.log(`isIssueBelongsToProject`, isIssueBelongsToProject, `isIssueKindBet`, isIssueKindBet)
            if (isIssueKindBet) {
              const oldDescription = changes.body ? changes.body.from : '';
              const newDescription = issue.body;

              if (oldDescription !== newDescription) {
                console.log('Issue description has changed.');
                console.log('Old Description:', oldDescription);
                console.log('New Description:', newDescription);

                const scopeIndex = newDescription.indexOf('### Scope');
                if (scopeIndex !== -1) {
                  const scopeText = newDescription.slice(scopeIndex);
                  const pattern = /### Scope\s*\n([\s\S]*?)(?=###|$)/
                  const match = scopeText.match(pattern);
                  const tasks = match[1].trim().split('\n').map(task => task.match(/#(\d+)/)[1])
                  if (tasks && tasks.length > 0) {
                    console.log('Tasks:');
                    console.log(JSON.stringify(tasks));
                    return (tasks.join(','))
                  } else {
                    console.log('No tasks found under the Scope section.');
                    return ('')
                  }
                } else {
                  console.log('Scope section not found in the description.');
                  return ('')
                }
              } else {
                console.log('Issue description did not change.');
                return ('')
              }
            }
      # - name: Add to Project beta
      #   id: add-to-project-beta
      #   uses: octokit/graphql-action@v2.2.1
      #   with:
      #     query: |
      #       mutation {
      #         addProjectV2ItemById(input: {projectId: 4, contentId: 7}) {
      #           clientMutationId
      #         }
      #       }
      #     owner: ${{ github.event.repository.owner.name }}
      #     repo: ${{ github.event.repository.name }}
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Add to project
        id: add-project
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tasks = ${{ steps.extract-tasks.outputs.result }}
            const projectId = 4
            if (tasks === '') {
              console.log('No tasks to work with')
              return 0
            }
            const tasksAsArray = tasks.split(',').map(Number)
            const addIssueToProject = async (issueNumber, projectId) => {
              const addToProjectMutation = `mutation {
                  addProjectV2ItemById(input: {projectId: ${projectId}, contentId: ${issueNumber}}) {
                    clientMutationId
                  }
                }`;
              const variables = {
                  owner: context.repo.owner,
                  name: context.repo.repo,
                  projectId: 4,
                  issueNumber: 7
                };
              
              try {
                await github.graphql(addToProjectMutation, variables);
                console.log(`Added issue #${issueNumber} to project ${projectId}.`);
              } catch (error) {
                console.log(`Failed to add issue #${issueNumber} to project column:`, error);
              }
            };
            for (const scope of tasksAsArray) {
              console.log("Working with ", scope)
              await addIssueToProject(scope, projectId)
            }


